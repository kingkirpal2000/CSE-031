https://cseweb.ucsd.edu/classes/sp13/cse141-a/solutions/assignment6_solutions.pdf
TPS 1:
1. A CPU cache is a hardware cache used by the central processing unit (CPU) of a computer to reduce the average cost 
(time or energy) to access data from the main memory.[1] A cache is a smaller, faster memory, located closer 
to a processor core, which stores copies of the data from frequently used main memory locations. 
Most CPUs have a hierarchy of multiple cache levels (L1, L2, often L3, and rarely even L4), 
with separate instruction-specific and data-specific caches at level 1. We need the cache in order to make accessing data from
memory a lot faster. 
2. ok
3. ok
4. 4 bits for 16B. log_2 (blockSize) is the function for number of bits in offset given blocksize. No it is not practical because
you would store 4 bytes of data just to keep track of 1 byte of data
5. 6 bits; log_2(blocks)
6. yes sizeofcache = numberofblocks * blocksize
7. use them as a tag to identify which data is in the cache
8. 
	a. Main memory = 2^20 = 1048575 locations
	b. Offset bits = 3
	c. 16 blocks or lines
	d. 4 bits
	e. 13 bits ==> 20-3-4
	f. img.png
	g. 13 tag+ 1v+ 1d+8x8=79

TPS 2:
1. Disadvantage of direct mapped cache is Each block of main memory maps to a fixed location in the cache; therefore, if two
different blocks map to the same location in cache and they are continually referenced,
the two blocks will be continually swapped in and out (known as thrashing)
2. ok 
3. sets = 2^10/2^2 log_2(2^10/2^2) = 8 bits; sets = numberofblocks / blocksize log_2(sets) = indexbits
4. 
	a. Main memory = 2^20
	b. offset = 3
	c. 16 blocks
	d. 8 
	e. 3
	f. 14
	g. img1.png
	h. 14+1+1+8x8=80

